#+TITLE: REST, mikroserwisy - Sprawozdanie
#+SUBTITLE: Dawid Macek
#+LANGUAGE: pl
#+OPTIONS: date:nil, num:nil, toc:nil
#+LATEX_HEADER: \renewcommand*{\contentsname}{Spis treści}
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LATEX_HEADER: \usepackage[margin=0.7in]{geometry}
#+HTML_HEAD: <style>pre.src {background-color: #303030; color: #e5e5e5;}</style>

* Zadanie 1
** Wysłanie żądań
Za pomocą CURLa pobieram to co serwuje serwer pod ~/~ i ~/helo~.

#+begin_src 
$ curl -sX GET http://localhost:3000/
<h1>HTTP Server</h1><p>Go to /hello subpage!</p>

$ curl -sX GET http://localhost:3000/hello
<p>Anonymous message: Oh, Hi Mark!</p>
#+end_src

Po stronie serwera wyświetlane zostają opdowiednie komunikaty:
#+begin_src
Handling GET /
Handling GET /hello
#+end_src

** Modyfikacja kodu raportującego

Funkcja ~printReqSummary~ przed modyfikacją i po dodaniu timestampu.
#+begin_src js
// function printReqSummary(request) {
//   // Display handled HTTP method and link (path + queries)
//   console.log(`Handling ${request.method} ${request.originalUrl}`);
// }

function printReqSummary(request) {
  // Display handled HTTP method and link (path + queries)
  console.log(`[${Date.now()}] ${request.method} ${request.originalUrl}`);
}
#+end_src

Po zmianie wiadomości wyglądają następująco:
#+begin_src
[1578782272022] GET /
[1578782273009] GET /hello
#+end_src

** Endpoint ~/time~
   Nowy endpoint powinien zwracać obecny timestamp.

   #+begin_src js
// GET /time -- Show current timestamp
app.get("/time", function(request, response) {
  printReqSummary(request);
  response.send(`<p>${Date.now()}</p>`);
});
   #+end_src


** Test ~/time~
   Wysłanie zapytania:
   #+begin_src 
   $ curl -sX GET http://localhost:3000/time
   <p>1578782499294</p>o
   #+end_src

   Log serwera:
   #+begin_src
   [1578782499294] GET /time
   #+end_src

* Zadanie 2
** Testowanie endpointów
*** Dla ~/~
    Wyświetlona zostaje lista obsługiowanych endpointów wraz z informacją o parametrach i kluczach query-stringów.
    #+begin_src 
$ curl -sX GET http://localhost:3000
<h1>URL Parameters (and Queries)</h1><ul>
      <li>Show normal message (GET /hello/segment1)</li>
      <li>Show special message (GET /hello/segment1/segment2?age=NUMBER&height=NUMBER)</li>
          <li>  where segment1, segment2 - any valid URL part</li>
          </ul>
    #+end_src

*** Dla ~/hello/:name~
    To co podamy w miejscu ~:name~ zostanie użyte do budowania odpowiedzi.
    Jeżeli nie podamy nic, to Express uzna, że pytamy o ścieżkę ~/hello/~, która nie jest zdefiniowana.
    #+begin_src 
$ curl -sX GET http://localhost:3000/hello/Arthur
<p>Normal message for: Arthur</p>

$ curl -sX GET http://localhost:3000/hello/John
<p>Normal message for: John</p>

$ curl -sX GET http://localhost:3000/hello/
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Error</title>
</head>
<body>
<pre>Cannot GET /hello/</pre>
</body>
</html>
    #+end_src

*** Dla ~/hello/:name/:surname?age=_&height=_~
    Poniższe wyniki pokazują, że query-stringi są opcjonalne.
    W wypadku braku odpowiedniego klucza, pole w odpowiedzi ma wartość ~undefined~.
    Brak walidacji, ponieważ w polach numereycznych można wpisać dowolne ciągi znaków.

    #+begin_src
    $ curl -sX GET http://localhost:3000/hello/John/Doe
    <p>Special message for: John Doe
      (age: undefined years, height: undefined cm)</p>

    $ curl -sX GET http://localhost:3000/hello/John/Doe?age=22
    <p>Special message for: John Doe
      (age: 22 years, height: undefined cm)</p>

    $ curl -sX GET http://localhost:3000/hello/John/Doe?height=22
    <p>Special message for: John Doe
      (age: undefined years, height: 22 cm)</p>

    $ curl -sX GET http://localhost:3000/hello/John/Doe?age=22\&height=22
    <p>Special message for: John Doe
      (age: 22 years, height: 22 cm)</p>

    $ curl -sX GET http://localhost:3000/hello/John/Doe?age=22\&height=kopytko
    <p>Special message for: John Doe
      (age: 22 years, height: kopytko cm)</p>
    #+end_src
** Endpoint zwracający losowe parametry
   Korzystam z podanej funkcji, z tym że zdefiniowałem ją jako lambdę.
   #+begin_src js
// GET /rand/:a/:b/:c -- Return one of :a, :b, :c
app.get("/rand/:a/:b/:c", function(req, response) {
    printReqSummary(req);

    let randint = (min, max) => { return Math.floor(Math.random() * (max - min + 1)) + min; },
        rand = [req.params.a, req.params.b, req.params.c][randint(0, 2)];

    response.send(`<p>${rand}</p>`);
});
   #+end_src

   Po wysłaniu wielu zapytań pod nowo-zdefiniowany endpoint widać, że wyniki są w miarę losowe:
   #+begin_src 
$ curl -sX GET http://localhost:3000/rand/lubie/kotlety/schabowe
<p>schabowe</p>

$ curl -sX GET http://localhost:3000/rand/lubie/kotlety/schabowe
<p>kotlety</p>

$ curl -sX GET http://localhost:3000/rand/lubie/kotlety/schabowe
<p>lubie</p>

$ curl -sX GET http://localhost:3000/rand/lubie/kotlety/schabowe
<p>schabowe</p>

$ curl -sX GET http://localhost:3000/rand/lubie/kotlety/schabowe
<p>kotlety</p>

$ curl -sX GET http://localhost:3000/rand/lubie/kotlety/schabowe
<p>schabowe</p>

$ curl -sX GET http://localhost:3000/rand/lubie/kotlety/schabowe
<p>schabowe</p>

$ curl -sX GET http://localhost:3000/rand/lubie/kotlety/schabowe
<p>lubie</p>

$ curl -sX GET http://localhost:3000/rand/lubie/kotlety/schabowe
<p>kotlety</p>

$ curl -sX GET http://localhost:3000/rand/lubie/kotlety/schabowe
<p>kotlety</p>

$ curl -sX GET http://localhost:3000/rand/lubie/kotlety/schabowe
<p>lubie</p>

$ curl -sX GET http://localhost:3000/rand/lubie/kotlety/schabowe
<p>schabowe</p>
   #+end_src
* Zadanie 3
** Testowanie endpointów
   Pomiędzy zadaniem drugim, a trzecim zmieniłem shella, więc znak zachęty wygląda inaczej.

   #+begin_src 
# Wyświetlone informacje o endpointach, czyli metoda HTTP oraz ścieżka.
>>> curl -sX GET http://localhost:3000
<h1>HTTP Methods</h1><ul>
<li>Show items (GET /item)</li>
<li>Add an item (PUT /item/:name)</li>
<li>Remove an item (DELETE /item/:name)</li></ul>

# Nic nie dodaliśmy, więc brak jakichkolwiek itemów.
>>> curl -sX GET http://localhost:3000/item/
<p>Available items: </p>

# Dodajemy nowy element
>>> curl -sX PUT http://localhost:3000/item/schabowe
<p>Item "schabowe" added successfully</p>

# Potwierdzamy, że zostal dodany
>>> curl -sX GET http://localhost:3000/item/
<p>Available items: schabowe</p>

# Próba dodania istniejącego wpisu się nie powiedzie.
>>> curl -sX PUT http://localhost:3000/item/schabowe
<p>Item "schabowe" already in collection</p>

# Dodajemy kolejny element
>>> curl -sX PUT http://localhost:3000/item/mielone
<p>Item "mielone" added successfully</p>

# Widzimy, że oba itemy są zapisane
>>> curl -sX GET http://localhost:3000/item/
<p>Available items: schabowe,mielone</p>

# Usuwamy istniejący wpis
>>> curl -sX DELETE http://localhost:3000/item/mielone
<p>Item "mielone" removed successfully</p>

# Próbujemy usunąć już nieistniejący wpis
>>> curl -sX DELETE http://localhost:3000/item/mielone
<p>Item "mielone" doesn't exists</p>

# Potwierdzamy, że wpis został usunięty
>>> curl -sX GET http://localhost:3000/item
<p>Available items: schabowe</p>
   #+end_src

** Dodawanie POSTem
   Implementujemy dodawanie wpisów za pomocą metody POST oraz z przekazywaniem parametrów przez query stringi.
   #+begin_src js
/* POST /item -- add new item to the collection */
app.post("/item", function(request, response) {
    printReqSummary(request);

    let itemName = request.query.name;

    if(itemName === null || itemName === undefined) {
        response.send("<p>Missing 'name' parameter.</p>");
        return;
    }

    /* Is the item in collection? */
    if (items.includes(itemName)) {
        response.send(`<p>Item "${itemName}" already in collection</p>`);
    } else {
        items.push(itemName);
        response.send(`<p>Item "${itemName}" added successfully</p>`);
    }
});
   #+end_src

** Updatowanie PUTem
   Modyfikujemy starą metodę PUT tak aby jako query string przyjmowała także nową nazwę.

   #+begin_src js
/* PUT /item/:name -- add (put) new item to the collection */
// app.put("/item/:name", function(request, response) {
//   printReqSummary(request);
//   const itemName = request.params.name;
//   /* Is the item in collection? */
//   if (items.includes(itemName)) {
//     response.send(`<p>Item "${itemName}" already in collection</p>`);
//   } else {
//     items.push(itemName);
//     response.send(`<p>Item "${itemName}" added successfully</p>`);
//  }
// });

/* PUT /item/:old_name -- updates item with old_name with name */
app.put("/item/:old_name", function(request, response) {
    printReqSummary(request);

    let oldName = request.params.old_name,
        newName = request.query.name,
        itemIndex = items.indexOf(oldName);

    if(newName === null || newName === undefined) {
        response.send("<p>Missing 'name' parameter.</p>");
        return;
    }

    if(itemIndex === -1) {
        response.send(`<p>Item "${oldName}" doesn't exist.</p>`);
        return;
    }

    if(items.includes(newName)) {
        response.send(`<p>Name "${newName}" is taken.</p>`);
        return;
    }

    items[itemIndex] = newName;
    response.send(`<p>Item "${oldName}" changed name to "${newName}."</p>`);
});
   #+end_src

** Test nowych endpointów
   #+begin_src
# Dodajemy nowy element
>>> curl -sX POST http://localhost:3000/item\?name=schabowe
<p>Item "schabowe" added successfully</p>

# Bez odpowiedniego klucza odstajemy błąd.
>>> curl -sX POST http://localhost:3000/item
<p>Missing 'name' parameter.</p>

# Nie możemy dodać duplikatów.
>>> curl -sX POST http://localhost:3000/item\?name=schabowe
<p>Item "schabowe" already in collection</p>

# Dodajemy inny element
>>> curl -sX POST http://localhost:3000/item\?name=mielone
<p>Item "mielone" added successfully</p>

# Wyświetlamy zwartość
>>> curl -sX GET http://localhost:3000/item
<p>Available items: schabowe,mielone</p>

# Próbujemy zmodyfikować nieistniejący i dostajemy błąd.
curl -sX PUT http://localhost:3000/item/devolaj\?name=pulpety
<p>Item "devolaj" doesn't exists.</p>

# Zmieniamy nazwę istniejącego.
curl -sX PUT http://localhost:3000/item/schabowe\?name=devolaj
<p>Item "schabowe" changed name to "devolaj."</p>

# Potwierdzamy, że faktycznie została zmieniona.
>>> curl -sX GET http://localhost:3000/item
<p>Available items: devolaj,mielone</p>

# Próbujemy zmienić nazwę na już zajętą.
curl -sX PUT http://localhost:3000/item/mielone\?name=devolaj
<p>Name "devolaj" is taken.</p>
   #+end_src

* Zadnie 4
** GET na ~/~
   Zostaje zwrócony opis endpointów w API, zawierający:
   - pod jaką ścieżkę powinniśmy kierować zapytanie
   - jakiej metody HTTP powinniśmy użyć
   - w jaki spposób są przekazywane parametry: przez query string czy fragment URL
   - słowny opis akcji
  #+begin_src
  >>> curl -sX GET http://localhost:3000/
  <h1>REST + Database</h1><ul>
        <li>Show all patients (GET /patient )</li>
        <li>Show specific patient (GET /patient/:id)</li>
        <li>Add new patient (POST /patient?name=:NAME&surname=:SURNAME)</li>
        <li>Modify existing patient (PUT /patient/:id?name=:NAME&surname=:SURNAME)</li>
        <li>Remove patient (DELETE /patient/:id)</li></ul>
  #+end_src

** Dodawanie pacjetów - ~POST /patient~
   Na początku dodajemy kilku pacjentów, aby mieć jakieś dane testowe.
   #+begin_src
# Dodajemy pacjenta John Doe
>>> curl -sX POST http://localhost:3000/patient\?name=John\&surname=Doe
{"id":1,"name":"John","surname":"Doe"}

# Dodajemy pacjenta Jane Doe
>>> curl -sX POST http://localhost:3000/patient\?name=Jane\&surname=Doe
{"id":2,"name":"Jane","surname":"Doe"}

# Upewniamy się czy zapisane
>>> curl -sX GET http://localhost:3000/patient
[{"id":1,"name":"John","surname":"Doe"},{"id":2,"name":"Jane","surname":"Doe"}]
   #+end_src

   Po podglądnięciu pliku ~db.json~:
   #+begin_src js
{
  "patients": [
    {
      "id": 1,
      "name": "John",
      "surname": "Doe"
    },
    {
      "id": 2,
      "name": "Jane",
      "surname": "Doe"
    }
  ]
}
   #+end_src

** Testowanie ~/patient/:id~ w zależności od metody HTTP
*** GET ~/patient/:id~
    Metoda GET pobiera informacje o pacjencie ze wskazanym identyfikatorem.
    Odbywa się to za pomocą funkcji ~getPatient()~, której wynik jest konwertowany na JSON-stringa.
    Kod odpowiedz HTTP to ~200 OK~ lub ~404 Not Found~ w zależności czy udalo się znaleźć pacjenta.

    #+begin_src js
    const patient = getPatient(id);
    if (patient !== undefined) {
      response.status(200).send(JSON.stringify(patient));
    } else {
      response.status(404).send({ error: "No patient with given id" });
    }
    #+end_src

    #+begin_src
# Zwrócony zostaje JSON(chociaż MIME type się nie zgadza się) z informacją o konkretnym pacjencie.
# Kod odpowiedzi 200
>>> curl -siX GET http://localhost:3000/patient/2
HTTP/1.1 200 OK
X-Powered-By: Express
Content-Type: text/html; charset=utf-8
Content-Length: 38
ETag: W/"26-afgqDEaNrYHA5SmEXj7F2fqH3A8"
Date: Sun, 12 Jan 2020 14:56:57 GMT
Connection: keep-alive

{"id":2,"name":"Jane","surname":"Doe"}

# Zwrócony błąd mówiący o tym, że brak pacjenta o id 3.
# Kod odpowiedzi 404
>>> curl -siX GET http://localhost:3000/patient/3
HTTP/1.1 404 Not Found
X-Powered-By: Express
Content-Type: application/json; charset=utf-8
Content-Length: 36
ETag: W/"24-289afur68CcXcCWSsu9/ylO8Xlc"
Date: Sun, 12 Jan 2020 14:57:39 GMT
Connection: keep-alive

{"error":"No patient with given id"}
    #+end_src

*** DELETE ~/patient/:id~
    Najpierw sprawdzane jest czy pacjent z przekazanym identyfikatorem istnieje.
    Jeśli nie to zwracana odpowiedź z odpowiednim komunikatem i kodem ~404 Not Found~.
    Jeżeli pacjent istnieje to wywoływana jest metoda na ~.remove({ id: id })~, ktora skutuje usunięciem pacjentów z danym identyfikatorem.


    #+begin_src js
    // Sprawdzanie czy pacjent istnieje
    if (patient === undefined) {
      response.status(404).send({ error: "No patient with given id" });
    } else { ... }

    // Właściwe usunięcie
    db
    .get("patients")
    .remove({ id: id })
    .write();
    response.status(200).send({ message: "Patient removed successfully" });
    #+end_src

    #+begin_src
# Próba usunięcia niestniejącego da nam kod odpowiedzi 404
>>> curl -siX DELETE http://localhost:3000/patient/3
HTTP/1.1 404 Not Found
X-Powered-By: Express
Content-Type: application/json; charset=utf-8
Content-Length: 36
ETag: W/"24-289afur68CcXcCWSsu9/ylO8Xlc"
Date: Sun, 12 Jan 2020 15:15:11 GMT
Connection: keep-alive

{"error":"No patient with given id"}

# Upewniamy się, że pacjent 2 istnieje.
>>> curl -siX GET http://localhost:3000/patient/2
HTTP/1.1 200 OK
X-Powered-By: Express
Content-Type: text/html; charset=utf-8
Content-Length: 47
ETag: W/"2f-cKhe/V972I6GQ8CR6k5WE4z0shU"
Date: Sun, 12 Jan 2020 15:15:16 GMT
Connection: keep-alive

{"id":2,"name":"Ferdynand","surname":"Kiepski"}

# Usuwamy pacjenta 2
>>> curl -siX DELETE http://localhost:3000/patient/2
HTTP/1.1 200 OK
X-Powered-By: Express
Content-Type: application/json; charset=utf-8
Content-Length: 42
ETag: W/"2a-7pvd9tYJ+7Obbv+8ssaSkG5jOqg"
Date: Sun, 12 Jan 2020 15:15:22 GMT
Connection: keep-alive

{"message":"Patient removed successfully"}

# Teraz już go nie ma.
>>> curl -siX GET http://localhost:3000/patient/2
HTTP/1.1 404 Not Found
X-Powered-By: Express
Content-Type: application/json; charset=utf-8
Content-Length: 36
ETag: W/"24-289afur68CcXcCWSsu9/ylO8Xlc"
Date: Sun, 12 Jan 2020 15:15:26 GMT
Connection: keep-alive

{"error":"No patient with given id"}
    #+end_src

*** PUT ~/patient/:id?name=_&surname=_~
    Zadaniem PUT jest zaktualizowanie informacji o *istniejącym* pacjencie.
    Po znalezieniu pacjenta ze wskazanym ID sprawdzane jest czy podane zostały parametry ~name~ i ~surname~.
    Jeżeli pacjent istnieje i parametry zostały podane, dochodzi do *zastąpienia* starego pacjenta nowym ze zaktualizowanymi danymi.
    Warstwa persystencji nadpisuje pacjenta za pomocą metody ~.assign()~.

    #+begin_src js
    // Sprawdzenie czy pacjent istnieje.
    const patient = getPatient(id);
    if (patient === undefined) {
      response.status(404).send({ error: "No patient with given id" });
    } else { ... }

    // Sprawdzenie czy query-stringi zostały podane.
    const name = request.query.name;
    const surname = request.query.surname;
    if (name === undefined || surname === undefined) {
      response.status(400).send({
        error: "Invalid request - missing queries (name and/or surname)"
      });
    } else { ... }

    // Jeśli wszystko się zgadza to zaktualizuj pacjenta
    const updatedPatient = { id: patient.id, name: name, surname: surname };
    db
    .get("patients")
    .find(patient)
    .assign(updatedPatient)
    .write();
    response.status(200).send(updatedPatient);
    #+end_src

    #+begin_src
# Kiedy próbujemy aktualizować nieistniejącego
>>> curl -siX PUT http://localhost:3000/patient/3
HTTP/1.1 404 Not Found
X-Powered-By: Express
Content-Type: application/json; charset=utf-8
Content-Length: 36
ETag: W/"24-289afur68CcXcCWSsu9/ylO8Xlc"
Date: Sun, 12 Jan 2020 15:08:50 GMT
Connection: keep-alive

{"error":"No patient with given id"}

# Kiedy nie podamy obu wymaganych parametrów
>>> curl -siX PUT http://localhost:3000/patient/2\?name=Ferdynand
HTTP/1.1 400 Bad Request
X-Powered-By: Express
Content-Type: application/json; charset=utf-8
Content-Length: 67
ETag: W/"43-iOrfy1na+aIgE+LflvF+Foc5CfE"
Date: Sun, 12 Jan 2020 15:09:01 GMT
Connection: keep-alive

{"error":"Invalid request - missing queries (name and/or surname)"}

# Kiedy uda nam się w końcu zaktualizować
>>> curl -siX PUT http://localhost:3000/patient/2\?name=Ferdynand\&surname=Kiepski
HTTP/1.1 200 OK
X-Powered-By: Express
Content-Type: application/json; charset=utf-8
Content-Length: 47
ETag: W/"2f-cKhe/V972I6GQ8CR6k5WE4z0shU"
Date: Sun, 12 Jan 2020 15:09:11 GMT
Connection: keep-alive

{"id":2,"name":"Ferdynand","surname":"Kiepski"}
    #+end_src
