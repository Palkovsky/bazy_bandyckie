#+TITLE: MongoDB - Praca domowa
#+Author: Dawid Macek
#+LANGUAGE: pl
#+OPTIONS: date:nil
#+LATEX_HEADER: \renewcommand*{\contentsname}{Spis treści}
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LATEX_HEADER: \usepackage[margin=0.7in]{geometry}
#+HTML_HEAD: <style>pre.src {background-color: #303030; color: #e5e5e5;}</style>

* Wstęp
  ~mongoimport~ nie pozwala na specyfikowanie typów dla plików JSONowych.
  Z tego powodu daty importowane są jak stringi.
  Typy można łatwo skonwertować odpowiednio updatując obiekty, ale ja zostałem przy datach reprezentowanych jako stringi.

  #+end_src
* Zadanie 1
  Wykorzystując bazę danych *yelp dataset* wykonaj zapytanie i komendy MongoDB, aby uzyskać następujące rezultaty.
** Zadanie 1a
   Zwróć bez powtórzeń wszystkie nazwy miast w których znajdują się firmy(business).
   Wynik posortuj na podstawie nazwy miasta alfabetycznie.
   #+begin_src js
     db.business.distinct('city').sort()   
   #+end_src
** Zadanie 1b
   Zwróć liczbę wszystkich recenzji, które pojawiły się po 2011 roku (włącznie).
   #+begin_src js
     // Zliczanie w Mongo bardzo wolne.
     // .find() zwraca poprawne rezultaty
     // Nie doczekałem do zakończenia .count(), ale jestem przekonany że zapytanie jest poprawne.
     db.review.find({$where: 'function() { return new Date(this.date).getFullYear() >= 2011}'}).count()

     // Można też próbować agregacją, z tym że w tam nie można używać $where.
     // Trzebaby jakoś przekonwertować liczbę przed pierwszym myślnikiem i ją sprawdzać.
   #+end_src
** Zadanie 1c
   Zwróć dane wszystkich zamkniętych(open) firm(business) z pól: nazwa, adres, gwiazdki (stars).
   #+begin_src js
    db.business.find({open: false}, {name: 1, full_address: 1, stars: 1})   
   #+end_src
** Zadanie 1d
   Zwróć dane wszystkich użytkowników(user), którzy nie uzyskali ani jednego pozytywnego głosu z kategorii(funny lub useful), 
   wynik posortuj alfabetycznie na podstawie imienia użytkownika.
   #+begin_src js
     db.user.find({$and: [{'votes.funny': 0}, {'votes.useful': 0}]}).sort({'name': 1})   
   #+end_src
** Zadanie 1e
   Określ, ile każde przedsiębiorstwo otrzymało wskazówek/napiwków(tip) w 2012.
   Wynik posortuj alfabetycznie na podstawie liczby (tip).
   #+begin_src js
     // Wersja prostsza, ale wyświetlająca tylko business_id
     db.tip.aggregate([
       {$match: {date: {$regex: /^2012-/}}},
       {$group: { _id: "$business_id", cnt: { $sum: 1} }},
       {$sort: {cnt: 1}}
     ]); 

     // Fajniejsza wersja, która zamiast business_id wyświetla nazwę biznesu.
     // Z tym, że jest tak wolna, że nie doczekałem pełnego wykonania.
     db.tip.aggregate([
       {$match: {date: {$regex: /^2012-/}}},
       {$group: { _id: "$business_id", cnt: { $sum: 1}}},
       {$sort: {cnt: 1}}
     ]).map(function(x) {
        return {
          "name": db.business.findOne({business_id: x._id}).name,
          "tips": x.cnt
        };
     });
   #+end_src
** Zadanie 1f
   Wyznacz, jaką średnia ocen(stars) uzyskała każda firma(business) na podstawie wszystkich recenzji.
   Wynik ogranicz do recenzji, które uzyskały min 4.0 gwiazdki.
   #+begin_src js
   db.review.aggregate([
       {$match: {stars: {$gte: 4.0}}},
       {$group: { _id: "$business_id", average: { $avg: "$stars" }}}
   ])

   // Manualny join tak żeby było widać nazwę firmy.
   // Wolne mocno.
   db.review.aggregate([
       {$match: {stars: {$gte: 4.0}}},
       {$group: { _id: "$business_id", average: { $avg: "$stars" }}}
   ]).map(function(x) {
       return {
           "name": db.business.findOne({business_id: x._id}).name,
           "tips": x.average
       };
   });
   #+end_src
** Zadanie 1f
   Usuń wszystkie firmy(business), które posiadają ocenę(stars) równą 2.0.
   #+begin_src js
   db.business.deleteMany({stars: 2.0})   
   #+end_src

* Zadanie 2
  Zdefiniuj funkcję (MongoDB) umożliwiającą dodanie nowej recenzji(review).
  Wykonaj przykładowe wywołanie.
  #+begin_src js
function newReview(business, user, stars, description) {
    var argsOk = true;
    
    argsOk &= business !== null && business.business_id !== null && user !== null && user.user_id !== null;
    argsOk &= [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0].includes(stars)
    
    if(!argsOk){
        return null;
    }
    
    var review = {
        votes: {funny: 0, useful: 0, cool: 0},
        user_id: user.user_id,
        business_id: business.business_id,
        text: description,
        type: "review",
        // Ponieważ założyliśmy, że daty to stringi.
        date: new Date().toString(),
        stars: stars,
        // Nie wiem w jaki sposób były generowane identyfikatory w oryginalnym zbiorze danych
        // dlatego używam tutaj ObjectId(), które różni się długością od pozostalych ze zbioru danych.
        review_id: new ObjectId().valueOf()
    };
    
    var result = db.review.insert(review);
    return (result.nInserted === 1) ? review : null; 
}

// Przykładowe wywołanie
var user = db.user.findOne();
var business = db.business.findOne();
newReview(business, user, 3.0, 'xDD');  
  #+end_src

* Zadanie 3
  Zdefiniuj funkcję (MongoDB), która zwróci wszystkie biznesy (business), w których w kategorii znajduje się podana przez użytkownika cechę.
  Wartość kategorii należy przekazać do funkcji jako parametr.
  Wykonaj przykładowe wywołanie zdefiniowanej funkcji.

  #+begin_src js
  
  #+end_src
