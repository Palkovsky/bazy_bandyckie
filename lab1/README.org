#+TITLE: Oracle PL/SQL - Sprawozdanie
#+LANGUAGE: pl
#+OPTIONS: date:nil
#+LATEX_HEADER: \usepackage[margin=0.7in]{geometry}
#+LATEX_HEADER: \renewcommand*{\contentsname}{Spis treści}

#+LATEX: \usepackage{listings}

#+LATEX: \newpage
* Schemat bazy
  Kod użyty do wygenerowania schematu bazy danych został skopiowany z dokumentu z zadaniami.
   #+begin_src sql
   CREATE TABLE OSOBY (
   ID_OSOBY INT GENERATED ALWAYS AS IDENTITY NOT NULL,
   IMIE VARCHAR2(50),
   NAZWISKO VARCHAR2(50),
   PESEL VARCHAR2(11),
   KONTAKT VARCHAR2(100),
   CONSTRAINT OSOBY_PK PRIMARY KEY (ID_OSOBY) ENABLE
   );

   CREATE TABLE WYCIECZKI (
   ID_WYCIECZKI INT GENERATED ALWAYS AS IDENTITY NOT NULL,
   NAZWA VARCHAR2(100),
   KRAJ VARCHAR2(50),
   DATA DATE,
   OPIS VARCHAR2(200),
   LICZBA_MIEJSC INT,
   CONSTRAINT WYCIECZKI_PK PRIMARY KEY (ID_WYCIECZKI) ENABLE
   );

   CREATE TABLE REZERWACJE (
   NR_REZERWACJI INT GENERATED ALWAYS AS IDENTITY NOT NULL,
   ID_WYCIECZKI INT,
   ID_OSOBY INT,
   STATUS CHAR(1),
   CONSTRAINT REZERWACJE_PK PRIMARY KEY (NR_REZERWACJI) ENABLE
   );

   ALTER TABLE REZERWACJE 
   ADD CONSTRAINT REZERWACJE_FK1 
   FOREIGN KEY (ID_OSOBY)
   REFERENCES OSOBY (ID_OSOBY)
   ENABLE;
   
   ALTER TABLE REZERWACJE
   ADD CONSTRAINT REZERWACJE_FK2 FOREIGN KEY (ID_WYCIECZKI)
   REFERENCES WYCIECZKI (ID_WYCIECZKI)
   ENABLE;
   
   ALTER TABLE REZERWACJE
   ADD CONSTRAINT REZERWACJE_CHK1 CHECK (status IN ('N','P','Z','A'))
   ENABLE;
   #+end_src
   
#+LATEX: \newpage
* Przykładowe dane
   Baza ma zawierać:
   - 4 wycieczki
   - 10 osób
   - 10 rezerwacji

   #+begin_src sql
/* OSOBY */
INSERT INTO osoby (imie, nazwisko, pesel, kontakt)
    VALUES('Adam', 'Kowalski', '87654321', 'tel: 6623');
INSERT INTO osoby (imie, nazwisko, pesel, kontakt)
    VALUES('Jan', 'Nowak', '12345678', 'tel: 2312, dzwonić po 18.00');
INSERT INTO osoby (imie, nazwisko, pesel, kontakt)
    VALUES('Wacław', 'Frydrych', '489712678', 'frydrych@agh.edu.pl');
INSERT INTO osoby (imie, nazwisko, pesel, kontakt)
    VALUES('Mariusz', 'Meszka', '237894156', 'meszka@agh.edu.pl');
INSERT INTO osoby (imie, nazwisko, pesel, kontakt)
    VALUES('Marek', 'Gajęcki', '731648726', 'mgajecki@agh.edu.pl');
INSERT INTO osoby (imie, nazwisko, pesel, kontakt)
    VALUES('Jarosław', 'Koźlak', '157894635', 'kozlak@agh.edu.pl');
INSERT INTO osoby (imie, nazwisko, pesel, kontakt)
    VALUES('Piotr', 'Faliszewski', '712347596', 'faliszw@agh.edu.pl');
INSERT INTO osoby (imie, nazwisko, pesel, kontakt)
    VALUES('Robert', 'Marcjan', '712456389', 'marcjan@agh.edu.pl');
INSERT INTO osoby (imie, nazwisko, pesel, kontakt)
    VALUES('Robert', 'Kubica', '487123549', 'robert@orlen.pl');
INSERT INTO osoby (imie, nazwisko, pesel, kontakt)
    VALUES('Rafał', 'Juraszek', '45978123', 'rafal@gmail.com');

/* WYCIECZKI */
INSERT INTO wycieczki (nazwa, kraj, data, opis, liczba_miejsc) VALUES (
  'Wycieczka do Paryza',
  'Francja', 
  TO_DATE('2019-01-01','YYYY-MM-DD'),
  'Ciekawa wycieczka ...',
  3
);
INSERT INTO wycieczki (nazwa, kraj, data, opis, liczba_miejsc) VALUES (
  'Piękny Kraków',
  'Polska',
  TO_DATE('2020-02-03','YYYY-MM-DD'),
  'Najciekawa wycieczka ...',
  2
);
INSERT INTO wycieczki (nazwa, kraj, data, opis, liczba_miejsc) VALUES (
  'Wieliczka',
  'Polska', 
  TO_DATE('2020-03-03','YYYY-MM-DD'),
  'Zadziwiająca kopalnia ...',
  2
);
INSERT INTO wycieczki (nazwa, kraj, data, opis, liczba_miejsc) VALUES (
  'Wycieczka do Londynu',
  'Anglia',
  TO_DATE('2020-04-03','YYYY-MM-DD'),
  'Lux wycieczka, Big Ben i takie tam.', 
  4
);

/* REZERWACJE */
INSERT INTO rezerwacje(id_wycieczki, id_osoby, status) VALUES (1,1,'N');
INSERT INTO rezerwacje(id_wycieczki, id_osoby, status) VALUES (2,2,'P');
INSERT INTO rezerwacje(id_wycieczki, id_osoby, status) VALUES (2,4,'A');
INSERT INTO rezerwacje(id_wycieczki, id_osoby, status) VALUES (4,9,'Z');
INSERT INTO rezerwacje(id_wycieczki, id_osoby, status) VALUES (4,3,'P');
INSERT INTO rezerwacje(id_wycieczki, id_osoby, status) VALUES (4,8,'P');
INSERT INTO rezerwacje(id_wycieczki, id_osoby, status) VALUES (3,5,'N');
INSERT INTO rezerwacje(id_wycieczki, id_osoby, status) VALUES (3,1,'Z');
INSERT INTO rezerwacje(id_wycieczki, id_osoby, status) VALUES (4,7,'N');
INSERT INTO rezerwacje(id_wycieczki, id_osoby, status) VALUES (1,3,'N');
   #+end_src

#+LATEX: \newpage
* Widoki
  Tworzenie widoków. Należy przygotować kilka widoków ułatwiających dostęp do danych.

** wycieczki​_osoby
   Widok łączy informacje o wycieczkach z uczestnikami na podstawie rezerwacji.
   #+begin_src sql
   CREATE OR REPLACE VIEW wycieczki_osoby
   AS
    SELECT
        w.ID_WYCIECZKI,
        w.NAZWA,
        w.KRAJ,
        w.DATA,
        o.IMIE,
        o.NAZWISKO,
        r.STATUS
    FROM
         WYCIECZKI w
    JOIN
        REZERWACJE r ON w.ID_WYCIECZKI = r.ID_WYCIECZKI
    JOIN
        OSOBY o ON r.ID_OSOBY = o.ID_OSOBY;
   #+end_src

** wycieczki​_osoby​_potwierdzone
   Widok zwraca informacje o potwierdzonych uczestnikach, czyli tych którzy potwierdzili i zapłacili.

   #+begin_src sql
CREATE OR REPLACE VIEW wycieczki_osoby_potwierdzone
 AS
    SELECT
        *
    FROM
         wycieczki_osoby
    WHERE
         STATUS = 'Z';
   #+end_src

** wycieczki​_przyszle
   Informacje o wycieczkach, które jeszcze się nie odbyły oraz ich uczestnikach.
   #+begin_src sql
CREATE OR REPLACE VIEW wycieczki_przyszle
 AS
    SELECT
        *
    FROM
      wycieczki_osoby
    WHERE
       DATA > CURRENT_DATE;
   #+end_src

** wycieczki​_miejsca
   Zwraca informacje o zajętości miejsc poszczególnych wycieczek. Jeśli jakaś rezerwacja została anulowana, to uznajemy że miejsce jest wolne.
   #+begin_src sql
CREATE OR REPLACE VIEW wycieczki_miejsca
 AS
    SELECT
        w.ID_WYCIECZKI,
        w.NAZWA,
        w.KRAJ,
        w.DATA,
        w.LICZBA_MIEJSC,
        w.LICZBA_MIEJSC - COUNT(r.ID_WYCIECZKI) as LICZBA_WOLNYCH_MIEJSC
 FROM
      WYCIECZKI w
 INNER JOIN
      REZERWACJE r ON w.ID_WYCIECZKI = r.ID_WYCIECZKI
 WHERE
       r.STATUS != 'A'
 GROUP BY
          w.ID_WYCIECZKI, w.NAZWA, w.KRAJ, w.DATA, w.LICZBA_MIEJSC;   
   #+end_src

** dostepne​_wycieczki
   Zwraca informacje o wycieczkach, które jeszcze się nie odbyły i mają wolne miejsca.
   #+begin_src sql
CREATE OR REPLACE VIEW dostepne_wycieczki
 AS
    SELECT
           *
    FROM
        wycieczki_miejsca
    WHERE
        LICZBA_WOLNYCH_MIEJSC > 0 AND DATA > CURRENT_DATE;   
   #+end_src

** rezerwacje​_do​_anulowania 
   Lista niepotwierdzonych rezerwacji które powinne zostać anulowane, rezerwacje przygotowywane są do anulowania na tydzień przed wyjazdem.
   #+begin_src sql
CREATE OR REPLACE VIEW rezerwacje_do_anulowania
  AS
    SELECT DISTINCT
        r.NR_REZERWACJI,
        r.ID_WYCIECZKI,
        r.ID_OSOBY,
        w.NAZWA,
        w.DATA,
        o.IMIE,
        o.NAZWISKO,
        o.KONTAKT
    FROM
        REZERWACJE r
    INNER JOIN
        OSOBY O on r.ID_OSOBY = O.ID_OSOBY
    INNER JOIN
        WYCIECZKI W on r.ID_WYCIECZKI = W.ID_WYCIECZKI
    WHERE
        w.DATA - CURRENT_DATE <= 7 AND r.STATUS != 'Z';
   #+end_src

#+LATEX: \newpage
* Procedury pobierające dane
  Procedury, które coś zwracają bez modyfikowania danych nazywamy ~funkcjami~. 
  Ich zaletą jest możliwość używania ich w zapytaniach ~SQL~, w porównaniu do typowych procedur, które można używać tylko w ~PL/SQL~.
  
  Ponieważ funkcje mogą zwracać tylko jedną wartość trzeba tworzyć specjalne tabelearyczne typy, które będą kolekcją zwracanych rekordów.
  Pozwala to osiągnąć efekt podobny do tego co oferują widoki, ale wywoływanye jako funkcje z obsługą błędów.

** uczestnicy​_wycieczki(id​_wycieczki)
   Procedura zwraca zestaw danych podobnych do tego z widoku ~wycieczki_osoby~.

   #+begin_src sql
/* Pojedynczy rekord */
CREATE OR REPLACE TYPE UCZESTNICY_WYCIECZKI_RECORD AS OBJECT (
  ID_WYCIECZKI  NUMBER,
  NAZWA         VARCHAR2(100),
  KRAJ          VARCHAR2(50),
  "DATA"        DATE,
  IMIE          VARCHAR2(50),
  NAZWISKO      VARCHAR(50),
  STATUS        CHAR(1)
);

/* Kolekcja rekordów */
CREATE OR REPLACE TYPE UCZESTNICY_WYCIECZKI_TABLE IS TABLE OF UCZESTNICY_WYCIECZKI_RECORD;

CREATE OR REPLACE
FUNCTION uczestnicy_wycieczki(id INT)
    RETURN UCZESTNICY_WYCIECZKI_TABLE AS result UCZESTNICY_WYCIECZKI_TABLE;
    record_count INT;
    BEGIN
        /* Upewnij się, że wycieczka istnieje */
        SELECT COUNT(*) INTO record_count FROM WYCIECZKI WHERE ID_WYCIECZKI = id;
        IF (record_count != 1) THEN
            RAISE_APPLICATION_ERROR(-20001, 'Record doest not exist.');
        END IF;

        /* Zbierz wynik do utworznej tabeli */
        SELECT UCZESTNICY_WYCIECZKI_RECORD(
            w.ID_WYCIECZKI, w.NAZWA, w.KRAJ, w.DATA, o.IMIE, o.NAZWISKO, r.STATUS)
        BULK COLLECT INTO
            result
        FROM
            WYCIECZKI w
        JOIN
            REZERWACJE r ON w.ID_WYCIECZKI = r.ID_WYCIECZKI
        JOIN
            OSOBY o ON r.ID_OSOBY = o.ID_OSOBY
        WHERE
            w.ID_WYCIECZKI = id AND r.STATUS != 'A';

        /* Zwróć tabelę */
        RETURN result;
    END uczestnicy_wycieczki;
   #+end_src

   Wyniki powyższej funkcji można teraz wykorzystywać w następujący sposób:
   #+begin_src sql
   SELECT * FROM TABLE(uczestnicy_wycieczki(1));
   #+end_src

** rezerwacje​_osoby(id​_osoby) 
   Procedura zwraca podobny zestaw danych do tego z widoku ~wycieczki_osoby~.
   #+begin_src sql
CREATE OR REPLACE TYPE REZERWACJE_OSOBY_RECORD AS OBJECT (
  ID_WYCIECZKI  NUMBER,
  NAZWA         VARCHAR2(100),
  KRAJ          VARCHAR2(50),
  "DATA"        DATE,
  IMIE          VARCHAR2(50),
  NAZWISKO      VARCHAR(50),
  STATUS        CHAR(1)
);
CREATE OR REPLACE TYPE REZERWACJE_OSOBY_TABLE IS TABLE OF REZERWACJE_OSOBY_RECORD;

CREATE OR REPLACE
FUNCTION rezerwacje_osoby(id INT)
    RETURN REZERWACJE_OSOBY_TABLE AS result REZERWACJE_OSOBY_TABLE;
    record_count INT;
    BEGIN
        /* Upewnij się, że osoba istnieje */
        SELECT COUNT(*) INTO record_count FROM OSOBY WHERE ID_OSOBY = id;
        IF (record_count != 1) THEN
            RAISE_APPLICATION_ERROR(-20001, 'Record doest not exist.');
        END IF;

        /* Zbierz wynik do utworznej tabeli */
        SELECT REZERWACJE_OSOBY_RECORD(
            w.ID_WYCIECZKI, w.NAZWA, w.KRAJ, w.DATA, o.IMIE, o.NAZWISKO, r.STATUS)
        BULK COLLECT INTO
            result
        FROM
            WYCIECZKI w
        JOIN
            REZERWACJE r ON w.ID_WYCIECZKI = r.ID_WYCIECZKI
        JOIN
            OSOBY o ON r.ID_OSOBY = o.ID_OSOBY
        WHERE
            o.ID_OSOBY = id AND r.STATUS != 'A';

        /* Zwróć tabelę */
        RETURN result;
    END rezerwacje_osoby;
   #+end_src

** przyszle​_rezerwacje​_osoby(id​_osoby) 
   Procedura zwracająca informacje o rezerwacjach danej osoby na wycieczki odbywające się w przyszłości.
   #+begin_src sql
CREATE OR REPLACE TYPE PRZYSZLE_REZERWACJE_OSOBY_RECORD AS OBJECT (
  ID_WYCIECZKI  NUMBER,
  NAZWA         VARCHAR2(100),
  KRAJ          VARCHAR2(50),
  "DATA"        DATE,
  IMIE          VARCHAR2(50),
  NAZWISKO      VARCHAR(50),
  STATUS        CHAR(1)
);
CREATE OR REPLACE TYPE PRZYSZLE_REZERWACJE_OSOBY_TABLE 
IS TABLE OF PRZYSZLE_REZERWACJE_OSOBY_RECORD;

CREATE OR REPLACE
FUNCTION przyszle_rezerwacje_osoby(id INT)
    RETURN PRZYSZLE_REZERWACJE_OSOBY_TABLE AS result PRZYSZLE_REZERWACJE_OSOBY_TABLE;
    record_count INT;
    BEGIN
        /* Upewnij się, że osoba istnieje */
        SELECT COUNT(*) INTO record_count FROM OSOBY WHERE ID_OSOBY = id;
        IF (record_count != 1) THEN
            RAISE_APPLICATION_ERROR(-20001, 'Record doest not exist.');
        END IF;

        /* Zbierz wynik do utworznej tabeli */
        SELECT PRZYSZLE_REZERWACJE_OSOBY_RECORD(
            w.ID_WYCIECZKI, w.NAZWA, w.KRAJ, w.DATA, o.IMIE, o.NAZWISKO, r.STATUS)
        BULK COLLECT INTO
            result
        FROM
            WYCIECZKI w
        JOIN
            REZERWACJE r ON w.ID_WYCIECZKI = r.ID_WYCIECZKI
        JOIN
            OSOBY o ON r.ID_OSOBY = o.ID_OSOBY
        WHERE
            o.ID_OSOBY = id AND r.STATUS != 'A' AND w.DATA > CURRENT_DATE;

        /* Zwróć tabelę */
        RETURN result;
    END przyszle_rezerwacje_osoby;
   #+end_src

** dostepne​_wycieczki(kraj, od, do)
   Funkcja wykorzystuje wcześniej stworzony widok ~dostepne_wycieczki~, który zapewnia że są wolne miejsca oraz że wycieczka jeszcze się nie odbyła.
   W procedurze sprawdzamy czy zakres dat jest poprawny.

   #+begin_src sql
CREATE OR REPLACE TYPE DOSTEPNE_WYCIECZKI_RECORD AS OBJECT (
  ID_WYCIECZKI  NUMBER,
  NAZWA         VARCHAR2(100),
  KRAJ          VARCHAR2(50),
  "DATA"        DATE,
  WOLNE_MIEJSCA NUMBER
);
CREATE OR REPLACE TYPE DOSTEPNE_WYCIECZKI_TABLE IS TABLE OF DOSTEPNE_WYCIECZKI_RECORD;

CREATE OR REPLACE
    FUNCTION dostepne_wycieczki_func(kraj WYCIECZKI.KRAJ%TYPE, data_od DATE, data_do DATE)
    RETURN DOSTEPNE_WYCIECZKI_TABLE AS result DOSTEPNE_WYCIECZKI_TABLE;
    BEGIN
        /* Upewnij się, że przedział dat jest okej */
        IF data_do < data_od THEN
            RAISE_APPLICATION_ERROR(-20001, 'Invalid date range.');
        END IF;

        /* Zbierz wynik do utworznej tabeli.
           Używamy widoku dostępne wycieczki, który bierze pod uwagę ilość miejsc. */
        SELECT DOSTEPNE_WYCIECZKI_RECORD(
            w.ID_WYCIECZKI, w.NAZWA, w.KRAJ, w.DATA, w.LICZBA_WOLNYCH_MIEJSC)
        BULK COLLECT INTO
            result
        FROM
            DOSTEPNE_WYCIECZKI w
        WHERE
             w.KRAJ = dostepne_wycieczki_func.kraj AND
             w.DATA >= data_od AND
             w.DATA <= data_do;

        /* Zwróć tabelę */
        RETURN result;
    END dostepne_wycieczki_func;   
   #+end_src
  
#+LATEX: \newpage
* Procedury modyfikujące dane
  Tworzenie procedur modyfikujących dane.
  Należy przygotować zestaw procedur pozwalających na modyfikację danych oraz kontrolę poprawności ich wprowadzania.
  Należy rozważyć użycie transakcji.
  Należy zwrócić uwagę na kontrolę parametrów (np. jeśli parametrem jest id​_wycieczki to należy sprawdzić czy taka wycieczka istnieje, jeśli robimy rezerwację to należy sprawdzać czy są wolne miejsca).
** dodaj​_rezerwacje(id​_wycieczki, id​_osoby)
    Procedura kontroluje czy wycieczka jeszcze się nie odbyła, i czy sa wolne miejsca. Używa do tego celu wcześniej stworzonego widoku ~dostepne​_wycieczki~. 
    Musimy walidować jedynie:
    - poprawność id​_wycieczki i id​_osoby
    - czy dana osoba nie złożyła wcześniej rezerwacji na daną wycieczkę
   #+begin_src sql
CREATE OR REPLACE PROCEDURE dodaj_rezerwacje(id_wycieczki NUMBER, id_osoby NUMBER)
AS
  osoby_count INT;
  wycieczki_count INT;
  rezerwacje_count INT;
BEGIN
  SELECT COUNT(*) INTO osoby_count FROM OSOBY WHERE ID_OSOBY = dodaj_rezerwacje.id_osoby;
  SELECT COUNT(*) INTO wycieczki_count FROM DOSTEPNE_WYCIECZKI 
    WHERE ID_WYCIECZKI = dodaj_rezerwacje.id_wycieczki;
  SELECT COUNT(*) INTO rezerwacje_count FROM REZERWACJE 
    WHERE ID_WYCIECZKI = dodaj_rezerwacje.id_wycieczki AND 
          ID_OSOBY = dodaj_rezerwacje.id_osoby;

  IF (osoby_count != 1) THEN
      raise_application_error(-20000, 'Invalid person identifier.');
  END IF;
  IF (wycieczki_count != 1) THEN
      raise_application_error(-20001, 'Invalid trip identifier.');
  END IF;
  IF (rezerwacje_count != 0) THEN
      raise_application_error(-20002, 'Booking already exists.');
  END IF;

  INSERT INTO REZERWACJE(ID_WYCIECZKI, ID_OSOBY, STATUS) 
  VALUES (id_wycieczki, id_osoby, 'N');
END dodaj_rezerwacje; 
   #+end_src

** zmien​_status​_rezerwacji(id​_rezerwacji, status)
   Procedura sprawdza:
   - Czy wycieczka już się odbyła, ponieważ nie można zmieniać rezerwacji dla wycieczek z przeszłości.
   - Czy przywrócenie anulowanej rezerwacji jest możliwe - muszą być wolne miejsca.
   - Czy nie ustawiamy rezerwacji stanu 'Nowa', ponieważ ten stan jest zarezerwowany tylko dla świeżo dodanych rezerwacji.
   - Czy nie zmieniamy stanu z 'Zapłacona i potwierdzona' na 'Potwierdzona'.  
   
   #+begin_src sql
CREATE OR REPLACE 
PROCEDURE zmien_status_rezerwacji(id_rezerwacji NUMBER, nowy_status CHAR)
AS
  id_wycieczki NUMBER;
  stary_status CHAR;
  counter INT;
BEGIN
  /* Czy rezerwacja istnieje */
  SELECT COUNT(*) INTO counter FROM REZERWACJE 
  WHERE NR_REZERWACJI = zmien_status_rezerwacji.id_rezerwacji;
  IF counter != 1 THEN
    RAISE_APPLICATION_ERROR(-20000, 'Invalid booking identifier.');
  END IF;

  /* Pobierz informacje o starym statusie oraz identyfikatorze wyczieczki */
  SELECT STATUS INTO stary_status FROM REZERWACJE 
    WHERE NR_REZERWACJI = zmien_status_rezerwacji.id_rezerwacji;
  SELECT ID_WYCIECZKI INTO id_wycieczki FROM REZERWACJE 
    WHERE NR_REZERWACJI = zmien_status_rezerwacji.id_rezerwacji;

  /* Sprawdź czy wycieczka ma miejsce w przyszłości. Jeśli nie to błąd. */
  SELECT COUNT(*) INTO counter FROM WYCIECZKI_PRZYSZLE 
    WHERE ID_WYCIECZKI = zmien_status_rezerwacji.id_wycieczki;
  IF counter = 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Unable to change reservation status for past trip.');
  END IF;

  /* Sprawdź czy nowy_status == 'N'. Jeśli tak to błąd. */
  IF zmien_status_rezerwacji.nowy_status = 'N' THEN
    RAISE_APPLICATION_ERROR(-20002, 'nowy_status must not be N');
  END IF;

  /* Zmiana z opłaconej i potwierdzonej na samą potwierdzoną nie ma sensu */
  IF nowy_status = 'P' AND stary_status = 'Z' THEN
    RAISE_APPLICATION_ERROR(-20003, 'The reservation is already paid.');
  END IF;

  /* Sprawdź czy stary_status=A. Jeśli tak to sprawdź czy są wolne miejsca. */
  IF stary_status = 'A' THEN
    SELECT COUNT(*) INTO counter FROM DOSTEPNE_WYCIECZKI 
      WHERE ID_WYCIECZKI = zmien_status_rezerwacji.id_wycieczki;
    IF counter = 0 THEN
      RAISE_APPLICATION_ERROR(-20004, 
        'Unable to uncancel reservation. All free spots taken.');
    END IF;
  END IF;

  /* W końcu updatuj */
  UPDATE REZERWACJE
    SET STATUS=zmien_status_rezerwacji.nowy_status 
    WHERE NR_REZERWACJI = zmien_status_rezerwacji.id_rezerwacji;
END zmien_status_rezerwacji; 
   #+end_src

** zmien​_liczbe​_miejsc(id​_wycieczki, liczba​_miejsc)
   #+begin_src sql
CREATE OR REPLACE 
PROCEDURE zmien_liczbe_miejsc(id_wycieczki NUMBER, nowa_liczba_miejsc NUMBER)
AS
  zajeta_liczba_miejsc NUMBER;
  counter INT;
BEGIN
  /* Sprawdź czy wycieczka istnieje */
  SELECT COUNT(*) INTO counter FROM WYCIECZKI
    WHERE ID_WYCIECZKI = zmien_liczbe_miejsc.id_wycieczki AND DATA > CURRENT_DATE;
  IF counter != 1 THEN
    RAISE_APPLICATION_ERROR(-20000, 'Invalid trip identifier.');
  END IF;

  /* Policz ile miejsc zajętych */
  SELECT LICZBA_MIEJSC - LICZBA_WOLNYCH_MIEJSC INTO zajeta_liczba_miejsc
    FROM WYCIECZKI_MIEJSCA WHERE ID_WYCIECZKI = zmien_liczbe_miejsc.id_wycieczki;
  /* Jeśli liczba miejsc ujemna lub mniejsza od ilości zarezerwowanych -> BŁĄD*/
  IF zajeta_liczba_miejsc > nowa_liczba_miejsc THEN
    raise_application_error(-20001, 'Not enough spots.');
  END IF;

  /* Updatuj */
  UPDATE WYCIECZKI SET LICZBA_MIEJSC=zmien_liczbe_miejsc.nowa_liczba_miejsc
    WHERE ID_WYCIECZKI=zmien_liczbe_miejsc.id_wycieczki;
END zmien_liczbe_miejsc;
   #+end_src

#+LATEX: \newpage
* Tabela dziennikująca  
  Dodajemy tabelę dziennikującą zmiany statusu rezerwacji ~rezerwacje_log(id, id_rezerwacji, data, status)~.
  Zmieniamy procedury modyfikujących dane tak aby dopisywały informację do dziennika.
  Pola ~ID​_REZERWACJI~ nie traktujemy jako klucza obcego, aby po usunięciu rezerwacji nie tracić informacji w logach.

   #+begin_src sql
CREATE TABLE REZERWACJE_LOG (
   REZERWACJE_LOG_ID INT GENERATED ALWAYS AS IDENTITY NOT NULL,
   ID_REZERWACJI INT,
   DATA DATE,
   STATUS CHAR(1),
   CONSTRAINT REZERWACJE_LOG_PK PRIMARY KEY (REZERWACJE_LOG_ID) ENABLE
); 
ENABLE;
   #+end_src
** Modyfikacja procedur
   Modyfikacja polega na dodaniu odpowiedniego wpisu do ~rezerwacje​_log~. 
   Modyfikacji podlegają jedynie procedury ~dodaj​_rezerwacje~ i ~zmien​_status​_rezerwacji~, bo tylko one edytują ~rezerwacje~.
   
*** dodaj​_rezerwacje
    #+begin_src sql
CREATE OR REPLACE PROCEDURE dodaj_rezerwacje(id_wycieczki NUMBER, id_osoby NUMBER)
AS
  osoby_count INT;
  wycieczki_count INT;
  rezerwacje_count INT;
  id_nowej_rezerwacji INT;
BEGIN
  SELECT COUNT(*) INTO osoby_count FROM OSOBY WHERE ID_OSOBY = dodaj_rezerwacje.id_osoby;
  SELECT COUNT(*) INTO wycieczki_count FROM DOSTEPNE_WYCIECZKI 
    WHERE ID_WYCIECZKI = dodaj_rezerwacje.id_wycieczki;
  SELECT COUNT(*) INTO rezerwacje_count FROM REZERWACJE 
    WHERE ID_WYCIECZKI = dodaj_rezerwacje.id_wycieczki AND 
          ID_OSOBY = dodaj_rezerwacje.id_osoby;

  IF (osoby_count != 1) THEN
      raise_application_error(-20000, 'Invalid person identifier.');
  END IF;
  IF (wycieczki_count != 1) THEN
      raise_application_error(-20001, 'Invalid trip identifier.');
  END IF;
  IF (rezerwacje_count != 0) THEN
      raise_application_error(-20002, 'Booking already exists.');
  END IF;
  
  /* To się zmieniło */
  INSERT INTO REZERWACJE(ID_WYCIECZKI, ID_OSOBY, STATUS) 
    VALUES (id_wycieczki, id_osoby, 'N')
    RETURNING NR_REZERWACJI INTO id_nowej_rezerwacji;
  INSERT INTO REZERWACJE_LOG(ID_REZERWACJI, DATA, STATUS) 
    VALUES(id_nowej_rezerwacji, CURRENT_DATE, 'N');
END dodaj_rezerwacje;  
    #+end_src
*** zmien​_status​_rezerwacji
    #+begin_src sql
CREATE OR REPLACE 
PROCEDURE zmien_status_rezerwacji(id_rezerwacji NUMBER, nowy_status CHAR)
AS
  id_wycieczki NUMBER;
  stary_status CHAR;
  counter INT;
BEGIN
  /* Czy rezerwacja istnieje */
  SELECT COUNT(*) INTO counter FROM REZERWACJE
  WHERE NR_REZERWACJI = zmien_status_rezerwacji.id_rezerwacji;
  IF counter != 1 THEN
    RAISE_APPLICATION_ERROR(-20000, 'Invalid booking identifier.');
  END IF;

  /* Pobierz informacje o starym statusie oraz identyfikatorze wyczieczki */
  SELECT STATUS INTO stary_status FROM REZERWACJE
    WHERE NR_REZERWACJI = zmien_status_rezerwacji.id_rezerwacji;
  SELECT ID_WYCIECZKI INTO id_wycieczki FROM REZERWACJE
    WHERE NR_REZERWACJI = zmien_status_rezerwacji.id_rezerwacji;

  /* Sprawdź czy wycieczka ma miejsce w przyszłości. Jeśli nie to błąd. */
  SELECT COUNT(*) INTO counter FROM WYCIECZKI_PRZYSZLE 
    WHERE ID_WYCIECZKI = zmien_status_rezerwacji.id_wycieczki;
  IF counter = 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Unable to change reservation status for past trip.');
  END IF;

  /* Sprawdź czy nowy_status == 'N'. Jeśli tak to błąd. */
  IF zmien_status_rezerwacji.nowy_status = 'N' THEN
    RAISE_APPLICATION_ERROR(-20002, 'nowy_status must not be N');
  END IF;

  /* Zmiana z opłaconej i potwierdzonej na samą potwierdzoną nie ma sensu */
  IF nowy_status = 'P' AND stary_status = 'Z' THEN
    RAISE_APPLICATION_ERROR(-20003, 'The reservation is already paid.');
  END IF;

  /* Sprawdź czy stary_status=A. Jeśli tak to sprawdź czy są wolne miejsca. */
  IF stary_status = 'A' THEN
    SELECT COUNT(*) INTO counter FROM DOSTEPNE_WYCIECZKI 
      WHERE ID_WYCIECZKI = zmien_status_rezerwacji.id_wycieczki;
    IF counter = 0 THEN
      RAISE_APPLICATION_ERROR(-20004, 
        'Unable to uncancel reservation. All free spots taken.');
    END IF;
  END IF;

  /* W końcu updatuj */
  UPDATE REZERWACJE
    SET STATUS=zmien_status_rezerwacji.nowy_status
    WHERE NR_REZERWACJI = zmien_status_rezerwacji.id_rezerwacji;

  /* TO SIĘ ZMIENIŁO */
  INSERT INTO REZERWACJE_LOG(ID_REZERWACJI, DATA, STATUS)
  VALUES (
    zmien_status_rezerwacji.id_rezerwacji,
    CURRENT_DATE,
    zmien_status_rezerwacji.nowy_status
);
END zmien_status_rezerwacji;    
    #+end_src
    
#+LATEX: \newpage
* Redundante pole ~liczba​_wolnych​_miejsc~
  W tabeli wycieczki dodajemy redundantne pole ~liczba​_wolnych​_miejsc~.
  #+begin_src sql
ALTER TABLE WYCIECZKI
  ADD LICZBA_WOLNYCH_MIEJSC INTEGER DEFAULT 0 NOT NULL;
  #+end_src

** Modyfikacja widoków
   Należy zmodyfikować zestaw widoków, które pobierają informację o wolnych miejscach z nowo dodanego pola.
   Zmiana będzie dotyczyć widoków ~wycieczki​_miejsca~ i ~dostepne​_wycieczki~, bo tylko one korzystają z informacji o wolnych miejscach.
*** wycieczki​_miejsca​_2
    #+begin_src sql
CREATE OR REPLACE VIEW wycieczki_miejsca_2
 AS
    SELECT
        w.ID_WYCIECZKI,
        w.NAZWA,
        w.KRAJ,
        w.DATA,
        w.LICZBA_MIEJSC,
        w.LICZBA_WOLNYCH_MIEJSC
 FROM
      WYCIECZKI w;    
    #+end_src
*** dostepne​_wycieczki​_2
    #+begin_src sql
CREATE OR REPLACE VIEW dostepne_wycieczki_2
 AS
    SELECT
           *
    FROM
        wycieczki_miejsca_2
    WHERE
        LICZBA_WOLNYCH_MIEJSC > 0 AND DATA > CURRENT_DATE;    
    #+end_src

** Procedura ~przelicz~
   Należy napisać procedurę przelicz która zaktualizuje wartość liczby wolnych miejsc dla już istniejących danych.
   #+begin_src sql
CREATE OR REPLACE PROCEDURE przelicz AS
  BEGIN
    UPDATE WYCIECZKI w SET LICZBA_WOLNYCH_MIEJSC = LICZBA_MIEJSC -
      (SELECT COUNT(*) FROM REZERWACJE r 
        WHERE r.ID_WYCIECZKI = w.ID_WYCIECZKI AND r.STATUS != 'A');
  END;   
   #+end_src

** Modyfikacja procedur pobierających dane
   Należy zmodyfikować warstwę procedur pobierających dane, podobnie jak w przypadku widoków.
   Jedyną funkcją używającą nowego pola jest ~dostepne​_wycieczki​_func~.
*** dostepne​_wycieczki​_2
    #+begin_src sql
CREATE OR REPLACE
    FUNCTION dostepne_wycieczki_func_2(kraj WYCIECZKI.KRAJ%TYPE, data_od DATE, data_do DATE)
    RETURN DOSTEPNE_WYCIECZKI_TABLE AS result DOSTEPNE_WYCIECZKI_TABLE;
    BEGIN
        /* Upewnij się, że przedział dat jest okej */
        IF data_do < data_od THEN
            RAISE_APPLICATION_ERROR(-20001, 'Invalid date range.');
        END IF;

        /* Zbierz wynik do utworznej tabeli.
           Używamy widoku dostępne wycieczki, który bierze pod uwagę ilość miejsc. */
        SELECT DOSTEPNE_WYCIECZKI_RECORD(
            ID_WYCIECZKI, NAZWA, KRAJ, DATA, LICZBA_WOLNYCH_MIEJSC)
        BULK COLLECT INTO
            result
        FROM
            WYCIECZKI
        WHERE
             KRAJ = dostepne_wycieczki_func_2.kraj AND
             LICZBA_WOLNYCH_MIEJSC > 0 AND
             DATA > CURRENT_DATE AND
             DATA >= data_od AND
             DATA <= data_do;

        /* Zwróć tabelę */
        RETURN result;
    END dostepne_wycieczki_func_2;    
    #+end_src

** Modyfikacja procedur modyfikujących dane
   Należy zmodyfikować procedury wprowadzające dane tak aby korzystały/aktualizowały pole ~liczba​_wolnych​_miejsc~ w tabeli wycieczki
   Najlepiej to zrobić tworząc nowe wersje (np. z sufiksem 2).
*** dodaj​_rezerwacje​_2
    #+begin_src sql
CREATE OR REPLACE PROCEDURE dodaj_rezerwacje_2(id_wycieczki NUMBER, id_osoby NUMBER)
AS
  osoby_count INT;
  wycieczki_count INT;
  wolne_miejsca INT;
  rezerwacje_count INT;
  id_nowej_rezerwacji INT;
BEGIN
  SELECT COUNT(*) INTO osoby_count FROM OSOBY 
    WHERE ID_OSOBY = dodaj_rezerwacje_2.id_osoby;
  SELECT COUNT(*) INTO wycieczki_count FROM WYCIECZKI
    WHERE ID_WYCIECZKI = dodaj_rezerwacje_2.id_wycieczki AND DATA > CURRENT_DATE;
  SELECT COUNT(*) INTO rezerwacje_count FROM REZERWACJE 
    WHERE ID_WYCIECZKI = dodaj_rezerwacje_2.id_wycieczki AND 
          ID_OSOBY = dodaj_rezerwacje_2.id_osoby;
  SELECT LICZBA_WOLNYCH_MIEJSC INTO wolne_miejsca FROM WYCIECZKI 
    WHERE ID_WYCIECZKI = dodaj_rezerwacje_2.id_wycieczki;

  IF (osoby_count != 1) THEN
      raise_application_error(-20000, 'Invalid person identifier.');
  END IF;
  IF (wycieczki_count != 1) THEN
      raise_application_error(-20001, 'Invalid trip identifier.');
  END IF;
  IF (rezerwacje_count != 0) THEN
      raise_application_error(-20002, 'Booking already exists.');
  END IF;
  IF (wolne_miejsca = 0) THEN
    raise_application_error(-20003, 'No free spots available.');
  END IF;

  INSERT INTO REZERWACJE(ID_WYCIECZKI, ID_OSOBY, STATUS)
    VALUES (id_wycieczki, id_osoby, 'N')
    RETURNING NR_REZERWACJI INTO id_nowej_rezerwacji;
  UPDATE WYCIECZKI SET LICZBA_WOLNYCH_MIEJSC = wolne_miejsca-1
    WHERE ID_WYCIECZKI = dodaj_rezerwacje_2.id_wycieczki;
   INSERT INTO REZERWACJE_LOG(ID_REZERWACJI, DATA, STATUS)
    VALUES(id_nowej_rezerwacji, CURRENT_DATE, 'N');
END dodaj_rezerwacje_2;
    #+end_src
*** zmien​_status​_rezerwacji​_2
    #+begin_src sql
CREATE OR REPLACE 
PROCEDURE zmien_status_rezerwacji_2(id_rezerwacji NUMBER, nowy_status CHAR)
AS
  id_wycieczki NUMBER;
  stary_status CHAR;
  counter INT;
  wolne_miejsca_change INT;
BEGIN
  /* Czy rezerwacja istnieje */
  SELECT COUNT(*) INTO counter FROM REZERWACJE
  WHERE NR_REZERWACJI = zmien_status_rezerwacji_2.id_rezerwacji;
  IF counter != 1 THEN
    RAISE_APPLICATION_ERROR(-20000, 'Invalid booking identifier.');
  END IF;

  /* Pobierz informacje o starym statusie oraz identyfikatorze wyczieczki */
  SELECT STATUS INTO stary_status FROM REZERWACJE
    WHERE NR_REZERWACJI = zmien_status_rezerwacji_2.id_rezerwacji;
  SELECT ID_WYCIECZKI INTO id_wycieczki FROM REZERWACJE
    WHERE NR_REZERWACJI = zmien_status_rezerwacji_2.id_rezerwacji;

  /* Sprawdź czy wycieczka ma miejsce w przyszłości. Jeśli nie to błąd. */
  SELECT COUNT(*) INTO counter FROM WYCIECZKI_PRZYSZLE 
    WHERE ID_WYCIECZKI = zmien_status_rezerwacji_2.id_wycieczki;
  IF counter = 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Unable to change reservation status for past trip.');
  END IF;

  /* Sprawdź czy nowy_status == 'N'. Jeśli tak to błąd. */
  IF zmien_status_rezerwacji_2.nowy_status = 'N' THEN
    RAISE_APPLICATION_ERROR(-20002, 'nowy_status must not be N');
  END IF;

  /* Zmiana z opłaconej i potwierdzonej na samą potwierdzoną nie ma sensu */
  IF nowy_status = 'P' AND stary_status = 'Z' THEN
    RAISE_APPLICATION_ERROR(-20003, 'The reservation is already paid.');
  END IF;

  /* Sprawdź czy stary_status=A. Jeśli tak to sprawdź czy są wolne miejsca. */
  IF stary_status = 'A' THEN
    SELECT LICZBA_WOLNYCH_MIEJSC INTO counter FROM WYCIECZKI 
      WHERE ID_WYCIECZKI = zmien_status_rezerwacji_2.id_wycieczki;
    IF counter = 0 THEN
      RAISE_APPLICATION_ERROR(-20004, 
        'Unable to uncancel reservation. All free spots taken.');
    END IF;
  END IF;

  /* W końcu updatuj */
  UPDATE REZERWACJE
    SET STATUS=zmien_status_rezerwacji_2.nowy_status
    WHERE NR_REZERWACJI = zmien_status_rezerwacji_2.id_rezerwacji;

  /* Zmodyfikuj liczbę wolnych miejsc */
  wolne_miejsca_change := 0;
  IF stary_status = 'A' AND zmien_status_rezerwacji_2.nowy_status != 'A' THEN
    wolne_miejsca_change := -1;
  END IF;
  IF stary_status != 'A' AND zmien_status_rezerwacji_2.nowy_status = 'A' THEN
    wolne_miejsca_change := 1;
  END IF;
  UPDATE WYCIECZKI SET LICZBA_WOLNYCH_MIEJSC = LICZBA_WOLNYCH_MIEJSC+ wolne_miejsca_change
    WHERE ID_WYCIECZKI = zmien_status_rezerwacji_2.id_wycieczki;

  INSERT INTO REZERWACJE_LOG(ID_REZERWACJI, DATA, STATUS)
  VALUES (
    zmien_status_rezerwacji_2.id_rezerwacji, 
    CURRENT_DATE,
    zmien_status_rezerwacji_2.nowy_status
);
END zmien_status_rezerwacji_2;    
    #+end_src
*** zmien​_liczbe​_miejsc​_2
    #+begin_src sql
CREATE OR REPLACE 
PROCEDURE zmien_liczbe_miejsc_2(id_wycieczki NUMBER, nowa_liczba_miejsc NUMBER)
AS
  zajeta_liczba_miejsc NUMBER;
  counter INT;
BEGIN
  /* Sprawdź czy wycieczka istnieje */
  SELECT COUNT(*) INTO counter FROM WYCIECZKI
    WHERE ID_WYCIECZKI = zmien_liczbe_miejsc_2.id_wycieczki AND DATA > CURRENT_DATE;
  IF counter != 1 THEN
    RAISE_APPLICATION_ERROR(-20000, 'Invalid trip identifier.');
  END IF;

  /* Policz ile miejsc zajętych */
  SELECT LICZBA_MIEJSC - LICZBA_WOLNYCH_MIEJSC INTO zajeta_liczba_miejsc
    FROM WYCIECZKI WHERE ID_WYCIECZKI = zmien_liczbe_miejsc_2.id_wycieczki;
  /* Jeśli liczba miejsc ujemna lub mniejsza od ilości zarezerwowanych -> BŁĄD*/
  IF nowa_liczba_miejsc < 0 OR zajeta_liczba_miejsc > nowa_liczba_miejsc THEN
    raise_application_error(-20001, 'Not enough spots.');
  END IF;

  /* Updatuj */
  UPDATE WYCIECZKI SET
      LICZBA_MIEJSC=zmien_liczbe_miejsc_2.nowa_liczba_miejsc,
      LICZBA_WOLNYCH_MIEJSC=
          zmien_liczbe_miejsc_2.nowa_liczba_miejsc-zmien_liczbe_miejsc_2.zajeta_liczba_miejsc
    WHERE ID_WYCIECZKI=zmien_liczbe_miejsc_2.id_wycieczki;
END zmien_liczbe_miejsc_2; 
    #+end_src

#+LATEX: \newpage
* Dziennikowanie przy pomocy triggerów
  Należy wprowadzić zmianę która spowoduje że zapis do dziennika rezerwacji będzie realizowany przy pomocy triggerów.
** Dodanie rezerwacji
   Trigger obsługujący dodanie rezerwacji.
   #+begin_src sql
CREATE OR REPLACE TRIGGER NOWA_REZERWACJA_DZIENNIK_TRIG
    AFTER INSERT
    ON REZERWACJE
    FOR EACH ROW
    BEGIN
        INSERT INTO REZERWACJE_LOG (ID_REZERWACJI, DATA, STATUS)
            VALUES(:NEW.NR_REZERWACJI, CURRENT_DATE, :NEW.STATUS);
    END NOWA_REZERWACJA_DZIENNIK_TRIG;   
   #+end_src

** Zmiana statusu
   Trigger obsługujący zmianę statusu.
   #+begin_src sql
CREATE OR REPLACE TRIGGER ZMIANA_STATUSU_DZIENNIK_TRIG
    AFTER UPDATE OF STATUS
    ON REZERWACJE
    FOR EACH ROW
    BEGIN
        INSERT INTO REZERWACJE_LOG (ID_REZERWACJI, DATA, STATUS)
            VALUES(:NEW.NR_REZERWACJI, CURRENT_DATE, :NEW.STATUS);
    END ZMIANA_STATUSU_DZIENNIK_TRIG;   
   #+end_src

** Usuwanie
   Trigger zabraniający usunięcia rezerwacji.
   #+begin_src sql
CREATE OR REPLACE TRIGGER USUWANIE_REZERWACJI_TRIG
    BEFORE DELETE
    ON REZERWACJE
    FOR EACH ROW
    BEGIN
        RAISE_APPLICATION_ERROR(-20000, 'Booking removal is disallowed.');
    END;   
   #+end_src

#+LATEX: \newpage
* Obsługa redundantego pola ~liczba​_wolnych​_miejsc~ przy pomocy tiggerów
  Zmiana strategii obsługi redundantnego pola ~liczba​_wolnych​_miejsc~. Realizacja przy pomocy triggerów.
** Dodanie rezerwacji
   Trigger obsługujący dodanie rezerwacji.
   #+begin_src sql
CREATE OR REPLACE TRIGGER NOWA_REZERWACJA_WOLNE_MIEJSCA_TRIG
BEFORE INSERT
ON REZERWACJE
FOR EACH ROW
DECLARE
    counter INT;
BEGIN
    /* Przed wstawieniem upuewnij się, że wolnie miejsce istnieje. */
    SELECT LICZBA_WOLNYCH_MIEJSC INTO counter FROM WYCIECZKI
        WHERE WYCIECZKI.ID_WYCIECZKI = :NEW.ID_WYCIECZKI;
    IF counter = 0 THEN
        RAISE_APPLICATION_ERROR(-20000, 'Not enough free spots.');
    END IF;

    /* Zmniejsz liczbę wolnych miejsc o 1 */
    UPDATE WYCIECZKI SET LICZBA_WOLNYCH_MIEJSC = LICZBA_WOLNYCH_MIEJSC-1
        WHERE ID_WYCIECZKI = :NEW.ID_WYCIECZKI;
END NOWA_REZERWACJA_WOLNE_MIEJSCA_TRIG;   
   #+end_src

** Zmiana statusu
   Trigger obsługujący zmianę statusu na anulowany lub z anulowanego.
   #+begin_src sql
CREATE OR REPLACE TRIGGER ZMIANA_STATUSU_WOLNE_MIEJSCA_TRIG
BEFORE UPDATE OF STATUS
ON REZERWACJE
FOR EACH ROW
DECLARE
    counter INT;
    update_by INT;
BEGIN
    SELECT LICZBA_WOLNYCH_MIEJSC INTO counter
        FROM WYCIECZKI WHERE ID_WYCIECZKI = :NEW.ID_WYCIECZKI;

    /* Jeżeli zmieniamy stan z anulowanej na nieanulowaną, ale miejsc brak to błąd.*/
    IF :OLD.STATUS = 'A' AND :NEW.STATUS != 'A' AND counter = 0 THEN
        RAISE_APPLICATION_ERROR(-20000, 'Not enough free spots.');
    END IF;

    /* Policz ile trzeba dodać do pola wolnych miejsc */
    update_by := 0;
    IF :OLD.STATUS = 'A' AND :NEW.STATUS != 'A' THEN
        update_by := -1; /* Odnowiona rezerwacja */
    END IF;
    IF :OLD.STATUS != 'A' AND :NEW.STATUS = 'A' THEN
        update_by := 1; /* Anulowanie rezerwacji */
    END IF;

    UPDATE WYCIECZKI SET
        LICZBA_WOLNYCH_MIEJSC = LICZBA_WOLNYCH_MIEJSC+update_by
    WHERE
        ID_WYCIECZKI = :NEW.ID_WYCIECZKI;
END ZMIANA_STATUSU_WOLNE_MIEJSCA_TRIG;   
   #+end_src

** Update wycieczki
   Trigger obsługujący zmianę liczby miejsc na poziomie wycieczki.
   #+begin_src sql
CREATE OR REPLACE TRIGGER ZMIANA_MIEJSC_WYCIECZKI_TRIG
BEFORE UPDATE OF LICZBA_MIEJSC
ON WYCIECZKI
FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
    zajete_miejsca INT;
BEGIN
    /* Policz ile miejsc zajętych */
    SELECT (LICZBA_MIEJSC-LICZBA_WOLNYCH_MIEJSC) INTO zajete_miejsca FROM WYCIECZKI
        WHERE ID_WYCIECZKI = :NEW.ID_WYCIECZKI;

    /* Sprawdź czy nowa liczba miejsc nie jest mniejsza od liczby już zajętych. */
    IF :NEW.LICZBA_MIEJSC < zajete_miejsca THEN
        RAISE_APPLICATION_ERROR(-20000, 'Spots count too low.');
    END IF;

    /* Przelicz liczbę miejsc */
    SELECT (:NEW.LICZBA_MIEJSC - zajete_miejsca)
        INTO :NEW.LICZBA_WOLNYCH_MIEJSC
        FROM DUAL;
END ZMIANA_MIEJSC_WYCIECZKI_TRIG; 
   #+end_src

#+LATEX: \newpage
* Procedury współdziałające z triggerami
  Modyfikacja będzie polegała na usunięciu fragmentów obsługujących redundante pole i wpisujące dane do dziennika.
  Procedury te będę identyczne do tych, co w rozdziale ~Procedury modyfikujące dane~. 
  Jedyną różnicą będzie sufiks ~_3~ oraz wykorzystanie widoków używających redundantego pola zamiast widoków obliczających wolne miejsca dynamicznie.





